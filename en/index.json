[{"content":"To be honest, I have never really paid attention to VNC. I learned about VNC a few years ago, but I never had a use for it.\nRecently, my Android device has been discontinued due to battery life issues, so I plan to keep it in a permanently plugged-in state (referring to charging).\nFor convenience, I directly installed Debian in Termux using a simple script.\nOne-click install Debian script: https://github.com/wahasa/Debian\nOne-click install Ubuntu script: https://github.com/MFDGaming/ubuntu-in-termux\nHowever, I do not recommend using Ubuntu in Termux. Since Termux cannot use systemd, Ubuntu\u0026rsquo;s snapd cannot be used either. (But it seems there is a way if rooted.) Ubuntu is deeply tied to snap, and even if there is a way to remove snap, it can be quite troublesome. There is also very little optimization for arm64 processors in snap, so why not just use Debian directly?\nFor example, to install the Firefox browser through traditional deb in Ubuntu, you first need to use snap remove firefox to delete it, but\u0026hellip; snap is completely unusable.\nPhantom Process Killer Starting from Android 12, there is a Phantom Process Killer mechanism that limits the number of background subprocesses for applications. Therefore, Termux can easily be killed, resulting in Process completed (signal 9). I used adb commands to disable this restriction.\nADB tool download link: https://developer.android.com/studio/releases/platform-tools\nadb devices adb shell \u0026#34;/system/bin/device_config set_sync_disabled_for_tests persistent\u0026#34; adb shell \u0026#34;/system/bin/device_config put activity_manager max_phantom_processes 2147483647\u0026#34; adb shell settings put global settings_enable_monitor_phantom_procs false Another method is to find Feature flag in the developer settings and disable settings_enable_monitor_phantom_procs there. However, I don\u0026rsquo;t know why there is nothing in the feature flag on my phone.\nDesktop Environment \u0026amp; VNC To allow the VNC client to connect to Debian on the phone, a desktop environment must be installed first.\nI used xfce, which can be installed directly using apt:\nsudo apt install xfce4 xfce4-goodies But you can also use @wahasa\u0026rsquo;s script, which also installs tigervnc and configures /.vnc/xstartup:\napt install wget -y ; wget https://raw.githubusercontent.com/wahasa/Debian/main/Desktop/de-xfce.sh ; chmod +x de-xfce.sh ; ./de-xfce.sh Here, I used vnc-start to start the VNC Server, which can only listen on the local port and cannot be found on the local area network.\nSo I added a no localhost flag:\n$ vncserver -localhost no TightVNC If you want to use TightVNC:\n$ apt install tightvncserver Delete Server: vncserver -kill :1\nChange VNC connection password: vncpasswd\nThen modify ~/.vnc/xstartup:\n#!/bin/bash xrdb $HOME/.Xresources startxfce4 \u0026amp; More You can also install gogs as a local Git server later.\nRefs\nhttps://docs.andronix.app/android-12/andronix-on-android-12-and-beyond\n","permalink":"https://moonlab.top/en/posts/2024/debian-on-android/","summary":"The author discusses their experience with VNC and setting up a Debian environment on an Android device using Termux. After their Android device became unusable due to battery issues, they installed Debian with a simple script. They advise against using Ubuntu in Termux due to limitations with systemd and snap. The post also covers the Phantom Process Killer in Android 12, providing ADB commands to disable it. For VNC access, the author installs the XFCE desktop environment and configures the VNC server to allow connections beyond localhost. They also mention potential future installations like Gogs for a local Git server.","title":"Install Debian on Android devices to become a BT download server"},{"content":"After a Windows update, the user\u0026rsquo;s Linux system failed to boot due to a 90-second wait and encountered dependency failures. Investigation revealed that Windows swapped the order of the Linux partition and the recovery partition, leading to the issue. The user resolved the problem by repairing Linux, updating fstab, reinstalling Grub, and using efibootmgr to change the boot order.\nAs usual, I finished using Windows, clicked on update, and shut down. At that moment, I thought this Windows update was trivial and wouldn’t affect my computer.\nBut the next second, I switched to the Linux system and noticed something was wrong.\nI booted Linux directly from rEFInd, and everything was fine at first until a 90-second wait appeared:\nAfter the 90-second countdown ended, I couldn’t boot into the system:\nDependency failed for file system check Dependency failed for local file system Then the system entered emergency mode, but the terminal was accessible.\nMoreover, Grub also entered rescue mode, indicating there was a problem with the boot process.\nI checked the disk partitions and found that the 10GB Recovery partition of Windows had swapped places with the Linux system partition. It was all due to Windows running rampant on my computer.\nRepair Linux It seemed that there was an issue with a certain partition.\nI was completely baffled.\nThe partition labeled E4F3, which had been executing a certain task, turned out to be nonexistent. Then I looked at fstab and found that this E4F3 was supposed to be mounted to /boot/efi. It seemed that this partition was originally my ESP, and I didn’t know what the Windows update did to change the UUID of the ESP.\nAfter that, I used the device path directly instead of the UUID.\nRepair Grub It seemed that grub.cfg also used UUID to locate the ESP, which caused the problem this time.\nA quick fix can be done with two commands. (However, Grub will be added to the first order of UEFI boot.)\n$ sudo grub-install $ sudo grub-mkconfig -p /boot/grub/grub.cfg Then I used efibootmgr to change the boot order (I used rEFInd):\n$ sudo efibootmgr -o 0001,0002,0003... I really don’t understand why Windows updates have to be so troublesome.\n","permalink":"https://moonlab.top/en/posts/2024/windows-update-broke-linux-system/","summary":"After a Windows update, the user\u0026rsquo;s Linux system failed to boot due to a 90-second wait and encountered dependency failures. Investigation revealed that Windows swapped the order of the Linux partition and the recovery partition, leading to the issue. The user resolved the problem by repairing Linux, updating fstab, reinstalling Grub, and using efibootmgr to change the boot order.","title":"[Dual Boot] Windows Update Destroyed My Linux System"},{"content":"At the beginning, I tried to push:\n$ git push -u origin main The result was:\nremote: Permission to XXX/repo.git denied to Olduser. fatal: unable to access \u0026#39;https://github.com/xxx/repo.git/\u0026#39;: The requested URL returned error: 403 Because I had previously set a local username, but it showed that the old user was denied access, I thought the author of the last commit was still the old user, which caused the authentication to fail.\nSo I tried again:\n$ git commit --amend --reset-author The result was still the same. Finally, I found a solution on stackoverflow.\nJust delete this credential, which wasted me 1 hour.\n","permalink":"https://moonlab.top/en/posts/2023/git-err/","summary":"When trying to use \u003ccode\u003egit push -u origin main\u003c/code\u003e, a permission error occurred, indicating that the old user was denied access. To resolve this issue, the author attempted to reset the commit author using \u003ccode\u003egit commit --amend --reset-author\u003c/code\u003e, but the problem persisted. Ultimately, a solution was found on Stack Overflow： deleting the old credentials successfully resolved the issue, saving an hour of time.","title":"Git push results in permission denied error 403"},{"content":"Coo Coo Coo Basically, this article summarizes the chapter on the View event distribution mechanism from the book \u0026ldquo;Exploring Android Art Development.\u0026rdquo;\nA long time ago, Android development notes were too superficial.\nBrief Introduction As we all know, an event sequence starts with MotionEvent.ACTION_DOWN (press), followed by multiple MotionEvent.MOVE (move) events, and ends with a MotionEvent.ACTION_UP (release).\nThe order of event transmission is: Activity -\u0026gt; Window -\u0026gt; DecorView -\u0026gt; RootView (the View you set).\nViewGroup is a subclass of View, which is fundamental.\nThe event distribution process is mainly accomplished by the following three methods:\npublic boolean dispatchTouchEvent(MotionEvent ev); // This method will definitely be called if the event reaches this View. public boolean onInterceptTouchEvent(MotionEvent event); // Used to determine whether the View intercepts this event. If intercepted, this method will not be called again in this event sequence. public boolean onTouchEvent(MotionEvent event); // Used to handle the event, returning whether the current event is consumed. If not consumed, this View will not receive it again in the same event sequence. Below is a piece of pseudocode to illustrate the relationship between the three methods:\npublic boolean dispatchTouchEvent(MotionEvent ev) { boolean consume = false; // onInterceptTouchEvent determines whether to intercept this event if (onInterceptTouchEvent(ev)) { // If intercepted, call onTouchEvent to handle the event and return whether this event is consumed consume = onTouchEvent(ev); } else { // If not intercepted, pass it to the child View consume = child.dispatchTouchEvent(ev); } // The return value of this method indicates whether this event is intercepted. return consume; } 注意调用 dispatchTouchEvent 时往往第一个是 ACTION_DOWN 事件，请搞清“拦截”和“消耗”两个概念，onInterceptTouchEvent 返回的是是否拦截，onTouchEvent 返回的是是否消耗。\n如果 onInterceptTouchEvent 返回 true ，但 onTouchEvent 返回 false，即代表拦截但不消耗事件，如果这个事件是 ACTION_DOWN，那么同一事件序列的其他事件将不会再交给此 View 了，这时会调用上一级的 onTouchEvent，如果还是 false ，那么就调用上一级的上一级的 onTouchEvent，如果都是 false，那么最终会交给 Activity 处理。\nonTouchEvent 的返回值是取决于 View 的 clickable 和 longClickable 属性的，只要其中一个为 true，那么 onTouchEvent 就会返回 true，与 enable 属性无关。\n如果 View 不消耗除 ACTION_DOWN 以外的事件，那么父 View 的 onTouchEvent 不会被调用，并且此 View 仍然可以接收到事件，不消耗的事件将直接交给 Activity 处理。\nAndroid 源码中 ViewGroup 的 onInterceptTouchEvent 默认会返回 false，而 View 则没有这个方法，会直接调用 onTouchEvent。\n如果一个 View 设置了 OnTouchListener 那么里面的 onTouch 方法则会被回调，我们都知道 onTouch 会返回一个 boolean ，onTouchEvent 方法是否被调用是取决于这个 boolean 的，如果返回 false，那么 onTouchEvent 则会被调用，我们经常设置的 OnClickListener 是在 onTouchEvent 中的。\n从上面可以看出， onTouchListener 的优先级高于 onTouchEvent，而 OnClickListener 则是优先级最低的。\n在网上翻到了一张图，总结得挺好：https://upload-images.jianshu.io/upload_images/2435754-a09ab44cb25be80d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/972/format/webp\nAndroid 源码分析 事件最开始会调用到 Activity 的 dispatchTouchEvent 方法：\npublic boolean dispatchTouchEvent(MotionEvent ev) { if (ev.getAction() == MotionEvent.ACTION_DOWN) { onUserInteraction(); } if (getWindow().superDispatchTouchEvent(ev)) { return true; } return onTouchEvent(ev); } 事件开始交给 Activity 所属的 Window 进行分发，Window 的实现类是 PhoneWindow ，我们继续来看 PhoneWindow#superDispatchTouchEvent：\nprivate DecorView mDecor; @Override public boolean superDispatchTouchEvent(MotionEvent event) { return mDecor.superDispatchTouchEvent(event); } 很明显，Window 又把事件交给了 DecorView ，就是你所设置的布局的父 View。\nDecorView#superDispatchTouchEvent\npublic boolean superDispatchTouchEvent(MotionEvent event) { // 这里又将事件传到了 ViewGroup, DecorView 是继承自 ViewGroup 的 return super.dispatchTouchEvent(event); } 我们所设置的 View 称作为根 View 或 顶级 View。\n至此，事件已经传递到我们的 View 中了。\nViewGroup 源码解析 我们来看看 ViewGroup 中的 dispatchTouchEvent 方法的一小段，因为 Android 源码实在过于复杂，我们只需要专注我们需要专注的内容就好。\n// 这个地方是 ViewGroup 是否拦截事件的一个逻辑 final boolean intercepted; if (actionMasked == MotionEvent.ACTION_DOWN || mFirstTouchTarget != null) { // 当 ViewGroup 满足 actionMasked == MotionEvent.ACTION_DOWN 或 mFirstTouchTarget != null 且没有设置标记位就会调用onInterceptTouchEvent // FLAG_DISALLOW_INTERCEPT 标记位是由 requestDisallowInterceptTouchEvent 方法设置的 final boolean disallowIntercept = (mGroupFlags \u0026amp; FLAG_DISALLOW_INTERCEPT) != 0; if (!disallowIntercept) { // onInterceptTouchEvent 方法在这 intercepted = onInterceptTouchEvent(ev); ev.setAction(action); // restore action in case it was changed } else { intercepted = false; } } else { // There are no touch targets and this action is not an initial down // so this view group continues to intercept touches. intercepted = true; } 这个 actionMasked == MotionEvent.ACTION_DOWN 不用多说，如果事件由 ViewGroup 拦截的话，那么后面的 mFirstTouchTarget != null 中的 mFirstTouchTarget 是指向子元素的，一旦事件由 ViewGroup 拦截，那么后面的 ACTION_MOVE, ACTION_UP 经过这里时， (actionMasked == MotionEvent.ACTION_DOWN || mFirstTouchTarget != null) 会返回 false，所以 ViewGroup 的 onInterceptTouchEvent 不会再被调用，且同一事件序列的其他事件都交由它处理。\n如果 ViewGroup 不拦截，那么 mFirstTouchTarget 会指向子元素，mFirstTouchTarget != null 为 true，则会调用 onInterceptTouchEvent ，显而易见不是吗？\n我们可以仔细想想，第一个传递到这里的事件经常是 ACTION_DOWN，如果拦截那么后续的同一事件序列中的其他事件都会交给它处理，这时候 onInterceptTouchEvent 被调用。\n假如后面又来了个 ACTION_MOVE，这时候因为 (actionMasked == MotionEvent.ACTION_DOWN || mFirstTouchTarget != null) 为 false 会直接拦截，但不会调用 onInterceptTouchEvent 了。\n这就证明了：如果一个 View 一旦决定拦截，那么将不再调用 onInterceptTouchEvent 来询问是否拦截。\n你们可以看到一个名为 FLAG_DISALLOW_INTERCEPT 的标记位，如果子 View 设置了这个标记位，那么\n(!disallowIntercept) 表达式则为 false，父 View 则不会拦截此事件，当然 ACTION_DOWN 事件除外，因为 View 判断如果是 ACTION_DOWN 则会重置这个标记位。\n标记位重置代码：\n// Handle an initial down. if (actionMasked == MotionEvent.ACTION_DOWN) { // Throw away all previous state when starting a new touch gesture. // The framework may have dropped the up or cancel event for the previous gesture // due to an app switch, ANR, or some other state change. cancelAndClearTouchTargets(ev); resetTouchState(); } 我们再看 ViewGroup 不拦截的时候：\nfinal int childrenCount = mChildrenCount; if (newTouchTarget == null \u0026amp;\u0026amp; childrenCount != 0) { final float x = ev.getX(actionIndex); final float y = ev.getY(actionIndex); final ArrayList\u0026lt;View\u0026gt; preorderedList = buildTouchDispatchChildList(); final boolean customOrder = preorderedList == null \u0026amp;\u0026amp; isChildrenDrawingOrderEnabled(); final View[] children = mChildren; for (int i = childrenCount - 1; i \u0026gt;= 0; i--) { final int childIndex = getAndVerifyPreorderedIndex( childrenCount, i, customOrder); // child final View child = getAndVerifyPreorderedView( preorderedList, children, childIndex); if (childWithAccessibilityFocus != null) { if (childWithAccessibilityFocus != child) { continue; } childWithAccessibilityFocus = null; i = childrenCount - 1; } if (!canViewReceivePointerEvents(child) || !isTransformedTouchPointInView(x, y, child, null)) { ev.setTargetAccessibilityFocus(false); continue; } newTouchTarget = getTouchTarget(child); if (newTouchTarget != null) { newTouchTarget.pointerIdBits |= idBitsToAssign; break; } resetCancelNextUpFlag(child); // dispatchTransformedTouchEvent 则是调用子元素的 dispatchTouchEvent if (dispatchTransformedTouchEvent(ev, false, child, idBitsToAssign)) { mLastTouchDownTime = ev.getDownTime(); if (preorderedList != null) { // childIndex points into presorted list, find original index for (int j = 0; j \u0026lt; childrenCount; j++) { if (children[childIndex] == mChildren[j]) { mLastTouchDownIndex = j; break; } } } else { mLastTouchDownIndex = childIndex; } mLastTouchDownX = ev.getX(); mLastTouchDownY = ev.getY(); newTouchTarget = addTouchTarget(child, idBitsToAssign); alreadyDispatchedToNewTouchTarget = true; break; } ev.setTargetAccessibilityFocus(false); } if (preorderedList != null) preorderedList.clear(); } 简单说一吧，dispatchTransformedTouchEvent 则是调用子元素的 dispatchTouchEvent，同来向子View 分发事件，我们来看 dispatchTransformedTouchEvent 方法内容：\nfinal int oldAction = event.getAction(); if (cancel || oldAction == MotionEvent.ACTION_CANCEL) { event.setAction(MotionEvent.ACTION_CANCEL); if (child == null) { // 因为 ViewGroup extends View ，所以会调用 View 的 dispatchTouchEvent 方法 handled = super.dispatchTouchEvent(event); } else { // 调用子类的 dispatchTouchEvent handled = child.dispatchTouchEvent(event); } event.setAction(oldAction); // 返回子 View 是否拦截 return handled; } 如果 dispatchTransformedTouchEvent 为 true，那么会调用 addTouchTarget 方法为 mFirstTouchTarget 赋值\nnewTouchTarget = addTouchTarget(child, idBitsToAssign); // 具体 addTouchTarget 里的代码就不看了 alreadyDispatchedToNewTouchTarget = true; 如果最后遍历所有子元素事件却没有被合适的处理，要么是 ViewGroup 内没有合适的可传递 View，要么是子 View 拦截并处理了事件，但 onTouchEvent 返回了 false，所以 dispatchTouchEvent 也返回了 false。\n这时 ViewGroup 就要自己处理事件了（震惊！孤寡老人竟无子可用！这究竟是\u0026hellip;）：\n// Dispatch to touch targets. if (mFirstTouchTarget == null) { // No touch targets so treat this as an ordinary view. handled = dispatchTransformedTouchEvent(ev, canceled, null, TouchTarget.ALL_POINTER_IDS) } 调用了 dispatchTransformedTouchEven 并在参数 child 传入了 null，回顾我们上面贴出来的 dispatchTransformedTouchEven 方法的代码，我们可以看到如果为 child == null则会调用 ViewGroup 自己的 dispatchTouchEvent。\nViewGroup 的源码解析到此也差不多了。\nView 源码解析 接着看它的一段 dispatchTouchEvent 代码：\npublic boolean dispatchTouchEvent(MotionEvent event) { boolean result = false; ... if (onFilterTouchEventForSecurity(event)) { if ((mViewFlags \u0026amp; ENABLED_MASK) == ENABLED \u0026amp;\u0026amp; handleScrollBarDragging(event)) { result = true; } ListenerInfo li = mListenerInfo; if (li != null \u0026amp;\u0026amp; li.mOnTouchListener != null \u0026amp;\u0026amp; (mViewFlags \u0026amp; ENABLED_MASK) == ENABLED \u0026amp;\u0026amp; li.mOnTouchListener.onTouch(this, event)) { result = true; } if (!result \u0026amp;\u0026amp; onTouchEvent(event)) { result = true; } } ... return result; } 这里的 View 只处理自己的事件，不会再向下传递事件了。\n我们看向中间第二个 if ，我们可以看到如果设置了 OnTouchListener，且 onTouch 方法返回了 true，那么 onTouchEvent 就不会执行，证明了前面所说的 OnTouchListener 优先级高于 OnClickListener。\n我们再看 onTouchEvent 的代码：\nif ((viewFlags \u0026amp; ENABLED_MASK) == DISABLED) { if (action == MotionEvent.ACTION_UP \u0026amp;\u0026amp; (mPrivateFlags \u0026amp; PFLAG_PRESSED) != 0) { setPressed(false); } return (((viewFlags \u0026amp; CLICKABLE) == CLICKABLE || (viewFlags \u0026amp; LONG_CLICKABLE) == LONG_CLICKABLE) || (viewFlags \u0026amp; CONTEXT_CLICKABLE) == CONTEXT_CLICKABLE); } 即使 View 为 disabled 状态也能消耗事件。\nif (((viewFlags \u0026amp; CLICKABLE) == CLICKABLE || (viewFlags \u0026amp; LONG_CLICKABLE) == LONG_CLICKABLE) || (viewFlags \u0026amp; CONTEXT_CLICKABLE) == CONTEXT_CLICKABLE) { // 只要 clickable | longClickable 其中一个为 true 就能执行这里，onTouchEvent 就会返回 true switch (action) { case MotionEvent.ACTION_UP: // 当手指抬起时 boolean prepressed = (mPrivateFlags \u0026amp; PFLAG_PREPRESSED) != 0; if ((mPrivateFlags \u0026amp; PFLAG_PRESSED) != 0 || prepressed) { ... if (!mHasPerformedLongPress \u0026amp;\u0026amp; !mIgnoreNextUpEvent) { removeLongPressCallback(); if (!focusTaken) { if (mPerformClick == null) { mPerformClick = new PerformClick(); } if (!post(mPerformClick)) { // performClick 将会调用 onClick performClick(); } } } ... } break; ... } ... return true; } 我们接着看 performClick 方法\npublic boolean performClick() { final boolean result; final ListenerInfo li = mListenerInfo; if (li != null \u0026amp;\u0026amp; li.mOnClickListener != null) { // 点击音 playSoundEffect(SoundEffectConstants.CLICK); // onClick 在这 li.mOnClickListener.onClick(this); result = true; } else { result = false; } sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED); return result; } 还没结束，我们再看一看 setOnClickListener 方法\npublic void setOnClickListener(OnClickListener l) { if (!isClickable) { setClickable(true); } getListenerInfo.mOnClickListener = l; } 可以看到在设置 View 的 OnClickListener会自动改变 View 的 clickable 属性，而 setOnLongClickListener 也是一样的。\n总结 事件分发机制就是点击事件的分发，在手指接触屏幕后产生的同一个事件序列都是点击事件。 点击事件的传递顺序是由外向内。 正常情况下一个事件序列只能被一个 View 拦截且消耗。 如果 View 决定拦截事件，那么这一个事件序列都会由这个View来处理。 当子 View 拦截却不不消耗点击事件，那点击事件将交由给他的父View去处理，如果所有的 View 都没有消耗掉点击事件（onTouchEvent 返回 false），最终 Activity 会调用自己的 onTouchEvent。 onInterceptTouchEvent 方法不一定会每次都执行，一个 View 一旦决定拦截将不会调用 onInterceptTouchEvent OnTouchListener的优先级高于onTouchEvent()。这样做的好处是方便在外部处理事件。 当我们把 View 设置为不可用状态，View 依然会消耗事件。 ","permalink":"https://moonlab.top/en/posts/2019/android-view-motionevent/","summary":"\u003ch1 id=\"coo-coo-coo\"\u003eCoo Coo Coo\u003c/h1\u003e\n\u003cp\u003eBasically, this article summarizes the chapter on the View event distribution mechanism from the book \u0026ldquo;Exploring Android Art Development.\u0026rdquo;\u003c/p\u003e\n\u003cp\u003eA long time ago, Android development notes were too superficial.\u003c/p\u003e\n\u003ch1 id=\"brief-introduction\"\u003eBrief Introduction\u003c/h1\u003e\n\u003cp\u003eAs we all know, an event sequence starts with MotionEvent.ACTION_DOWN (press), followed by multiple MotionEvent.MOVE (move) events, and ends with a MotionEvent.ACTION_UP (release).\u003c/p\u003e\n\u003cp\u003eThe order of event transmission is: Activity -\u0026gt; Window -\u0026gt; DecorView -\u0026gt; RootView (the View you set).\u003c/p\u003e","title":"Android Notes 1 - Analysis of the View Event Distribution Mechanism"},{"content":"Didn’t expect it, right? This pigeon remembered its blog!\nSummer vacation has arrived, and it feels like time is as free as money, losing the sense of time 233.\nI really have nothing to write about, so I’ll just casually talk about what I’ve been doing these past two days.\nYesterday, I started writing a third-party Zhihu Daily client.\nBecause I was too bored, I just decided to mess around. I used this API.\nLet me briefly talk about the problems I encountered before and the development process.\nArchitecture I used MVP, which stands for Model, View, Presenter.\nIt feels a bit troublesome, and I actually regret it a bit now; it’s too boring to write.\nAt first, of course, I was frantically writing interfaces and creating Activities.\nThen it was just using other people\u0026rsquo;s wheels like crazy.\nGlobal Exception Handling I wrote a global exception handler that implements the Thread.UncaughtExceptionHandler interface.\nThen I set up my Application and removed the default ExceptionHandler in MyApplication!\nIn the uncaughtException method, I wrote the code to handle exceptions, and I can’t use AlertDialog here!!!\nI directly jumped to a dedicated ExceptionActivity to handle it, which improves the user experience (though it’s actually not very useful).\nBut, but, but, but!!!\nI don’t know why the printStackTrace method of Throwable is ineffective in uncaughtException; I didn’t delve into it and I’m too lazy to care.\nJSON Parsing It’s nothing special, just JSONObject, JSONArray; I’m too lazy to use other people\u0026rsquo;s wheels 233.\nThe app needs to load images, and I didn’t consider Glide; I used the OkHttp framework, and Picasso also uses OkHttp. Moreover, Picasso is lighter, and in some cases, I personally feel that Picasso is easier to use than Glide.\nImage Width Too Wide The images in this WebView exceed the screen width. I searched online for \u0026ldquo;WebView image adaptive.\u0026rdquo;\nI found a method, which is to load JavaScript; this might be a common method but it works.\nWith my level of skill, I can only do it this way QAQ.\nwebView.setWebViewClient(new WebViewClient() { @Override public void onPageFinished(WebView view, String url) { super.onPageFinished(view, url); String javascript = \u0026#34;javascript:function ResizeImages() {\u0026#34; + \u0026#34;var myimg,oldwidth;\u0026#34; + \u0026#34;var maxwidth = document.body.clientWidth;\u0026#34; + \u0026#34;for(i=0;i \u0026lt;document.images.length;i++){\u0026#34; + \u0026#34;myimg = document.images[i];\u0026#34; + \u0026#34;if(myimg.width \u0026gt; maxwidth){\u0026#34; + \u0026#34;oldwidth = myimg.width;\u0026#34; + \u0026#34;myimg.width = maxwidth;\u0026#34; + \u0026#34;}\u0026#34; + \u0026#34;}\u0026#34; + \u0026#34;}\u0026#34;; view.loadUrl(javascript); view.loadUrl(\u0026#34;javascript:ResizeImages();\u0026#34;); } }); HTML Display I recommend a tool for organizing JSON: http://www.bejson.com/.\nIn the article interface, it returns HTML code, which is the article content, for example:\nThe HTML is a bit long, so I won\u0026#39;t include it. Emmmmmm, you get what I mean; many content-type projects use HTML syntax instead of Markdown.\nHere I encountered a pitfall. At first, I thought I just needed to display HTML using TextView.\nBut the actual result was quite unsatisfactory; the image display effect was poor, and the images were too small.\nThis is a serious problem.\nI started to doubt life\u0026hellip;\nI thought of using WebView to load it, but I was afraid it would be a wasted effort, so I analyzed the official Zhihu Daily.\nIt seems that they indeed use WebView; here’s the returned JSON:\n{ body: \u0026#34;\u0026lt;div class=\u0026#34;main-wrap content-wrap\u0026#34;\u0026gt;...\u0026lt;/div\u0026gt;\u0026#34;, image_source: \u0026#34;Yestone.com Copyright Image Library\u0026#34;, title: \u0026#34;Midnight Surprise · Moments Illusion\u0026#34;, image: \u0026#34;http://pic3.zhimg.com/2d41a1d1ebf37fb699795e78db76b5c2.jpg\u0026#34;, share_url: \u0026#34;http://daily.zhihu.com/story/4772126\u0026#34;, js: [ ], recommenders\u0026#34;: [ { \u0026#34;avatar\u0026#34;: \u0026#34;http://pic2.zhimg.com/fcb7039c1_m.jpg\u0026#34; }, { \u0026#34;avatar\u0026#34;: \u0026#34;http://pic1.zhimg.com/29191527c_m.jpg\u0026#34; }, { \u0026#34;avatar\u0026#34;: \u0026#34;http://pic4.zhimg.com/e6637a38d22475432c76e6c9e46336fb_m.jpg\u0026#34; }, { \u0026#34;avatar\u0026#34;: \u0026#34;http://pic1.zhimg.com/bd751e76463e94aa10c7ed2529738314_m.jpg\u0026#34; }, { \u0026#34;avatar\u0026#34;: \u0026#34;http://pic1.zhimg.com/4766e0648_m.jpg\u0026#34; } ], ga_prefix: \u0026#34;050615\u0026#34;, section\u0026#34;: { \u0026#34;thumbnail\u0026#34;: \u0026#34;http://pic4.zhimg.com/6a1ddebda9e8899811c4c169b92c35b3.jpg\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;Midnight Surprise\u0026#34; }, type: 0, id: 4772126, css: [ \u0026#34;http://news.at.zhihu.com/css/news_qa.auto.css?v=1edab\u0026#34; ] } You can see there’s a css entry. The display effect of the official Zhihu Daily is different from the webpage.\nIt seems that this CSS is loaded; I thought there was some other high technology!\nAfter all, efficiency is the priority, and there are benefits to doing it this way.\nWe just need to make some modifications to the text property of the JavaBean in the Model layer.\nAfter loading the CSS, I found that the whole world was different.\n(In fact, after loading the CSS, I found that the CSS provided by Zhihu Daily doesn’t even need to consider the width of the img tag; it automatically handles it QAQ.)\n(And loading the CSS also leaves space for the official Zhihu Daily app.)\nOne can easily see the collaboration between the Android client and the web developers, which is quite common (though it could also be a full-stack engineer).\nTips: If WebView\nBut I haven’t experienced this kind of collaboration yet; I’m crying.\nNow I’ve completed simple loading and viewing.\nI’ve only finished about one-sixth, or even less (crying).\n2020 Update Basically completed; mainly finished the pagination loading. Feel free to check out the messy code: GitHub (https://github.com/HelloLingC/zhihu-daily-open).\n","permalink":"https://moonlab.top/en/posts/2019/android-zhihu-daily/","summary":"The author started developing a third-party Zhihu Daily client during the summer vacation, using the MVP architecture. They encountered some issues, such as global exception handling and JSON parsing, and chose to use Picasso to load images. To solve the problem of images being too wide in the WebView, the author adjusted the image size through JavaScript. In the end, the author completed the basic loading and viewing functions and shared the code on GitHub. Despite the challenges in the development process, the author still enjoyed the experience.","title":"The question of Zhihu Daily"},{"content":" About Me(LingC) An Explorer of the cold land.\nEmail: contact@moonlab.top\nAbout the MoonLab Glowing guardian in the cosmic sea, A timeless, tranquil melody.\nAll the articles in this site are licensed under the CC BY-NC 4.0 .\nAtom Feed https://moonlab.top/atom.xml\nLinks \u0026gt; 折影轻梦\n\u0026gt; Zgcwkj\n\u0026gt; 变态鹅\n\u0026gt; Ojhdt\u0026rsquo;s blog\n\u0026gt; idealclover\n","permalink":"https://moonlab.top/en/about/","summary":"\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\"\u003e\n      \u003ciframe allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"allowfullscreen\" loading=\"eager\" referrerpolicy=\"strict-origin-when-cross-origin\" src=\"https://www.youtube.com/embed/wHqKkiHlvJc?autoplay=0\u0026amp;controls=1\u0026amp;end=0\u0026amp;loop=0\u0026amp;mute=0\u0026amp;start=0\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\" title=\"YouTube video\"\u003e\u003c/iframe\u003e\n    \u003c/div\u003e\n\n\u003ch1 id=\"about-melingc\"\u003eAbout Me(LingC)\u003c/h1\u003e\n\u003cp\u003eAn Explorer of the cold land.\u003c/p\u003e\n\u003cp\u003eEmail: \u003ca href=\"mailto:contact@moonlab.top\"\u003econtact@moonlab.top\u003c/a\u003e\u003c/p\u003e\n\u003ch1 id=\"about-the-moonlab\"\u003eAbout the MoonLab\u003c/h1\u003e\n\u003cp\u003eGlowing guardian in the cosmic sea,\nA timeless, tranquil melody.\u003c/p\u003e\n\u003cp\u003eAll the articles in this site are licensed under the  \u003ca href=\"http://creativecommons.org/licenses/by-nc/4.0/\"\u003eCC BY-NC 4.0\u003c/a\u003e .\u003c/p\u003e\n\u003cp\u003eAtom Feed  \u003ca href=\"https://moonlab.top/atom.xml\"\u003ehttps://moonlab.top/atom.xml\u003c/a\u003e\u003c/p\u003e\n\u003ch1 id=\"links\"\u003eLinks\u003c/h1\u003e\n\u003cp\u003e\u003ca href=\"https://blog.nexmoe.com/\"\u003e\u0026gt; 折影轻梦\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://blog.zgcwkj.cn/\"\u003e\u0026gt; Zgcwkj\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://blog.conoha.vip/\"\u003e\u0026gt; 变态鹅\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://blog.ojhdt.com\"\u003e\u0026gt; Ojhdt\u0026rsquo;s blog\u003c/a\u003e\u003c/p\u003e","title":"About"}]