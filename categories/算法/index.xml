<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>算法 on MoonLab</title><link>https://moonlab.top/categories/%E7%AE%97%E6%B3%95/</link><description>Recent content in 算法 on MoonLab</description><generator>Hugo -- 0.143.1</generator><language>zh-CN</language><lastBuildDate>Sun, 04 May 2025 02:23:47 +0800</lastBuildDate><atom:link href="https://moonlab.top/categories/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml"/><item><title>算法 - 前缀和</title><link>https://moonlab.top/posts/2025/alg-prefix-array/</link><pubDate>Sun, 04 May 2025 02:23:47 +0800</pubDate><guid>https://moonlab.top/posts/2025/alg-prefix-array/</guid><description>&lt;p>在需要频繁地求数组中区间的和的情景下，前缀和数组十分有用。花费 $O(n)$ 的时间生成前缀和，之后只需要 $O(1)$ 的时间计算区间和。&lt;/p>
&lt;p>定义一个数组&lt;code>a = [1, 2, 3, 4, 5]&lt;/code>，它的前缀和数组：&lt;/p>
&lt;pre tabindex="0">&lt;code>prefix[0] = 1
prefix[1] = 1 + 2 = 3
prefix[2] = 1 + 2 + 3 = 6
prefix[3] = 1 + 2 + 3 + 4 = 10
prefix[4] = 1 + 2 + 3 + 4 + 5 = 15
&lt;/code>&lt;/pre>&lt;p>要计算 $[i,j]$ 区间的和，可以用 &lt;code>prefix[j] - prefix[i-1]&lt;/code> 算出，其中 i = 0 下溢时直接取 &lt;code>prefix[j]&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> prefix(n);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> sum &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> n; i&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sum &lt;span style="color:#f92672">+=&lt;/span> i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> prefix[i] &lt;span style="color:#f92672">=&lt;/span> sum;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>C++的&lt;code>numeric&lt;/code>库提供了一个方便的函数&lt;code>partial_sum&lt;/code>可以快速计算前缀和。&lt;/p></description></item><item><title>2025蓝桥杯赛后总结</title><link>https://moonlab.top/posts/2025/lanqiao-aftermatch/</link><pubDate>Thu, 01 May 2025 16:11:27 +0800</pubDate><guid>https://moonlab.top/posts/2025/lanqiao-aftermatch/</guid><description>&lt;p>这次省赛，实际上我并无准备，因为我一如既往地对算法没有什么兴趣。&lt;/p>
&lt;p>竞赛一共八道题，A和B题是填空题，后六道题都是程序设计。前五题都做了，第六题暴力应该只拿了部分分，后两题就没时间写了。&lt;/p>
&lt;p>在赛场上当时看到C++编译器是2014年发布的gcc 4.7.4，用的是C++98标准。但蓝桥杯的云端是可以运行C++11以上的标准的代码的。&lt;/p>
&lt;p>本地做题环境的编译器低版本，导致许多C++函数用不了。比如 to_string()函数用不了。前两题最快速的做饭需要将数转到字符串类型，但是我只知道c++中有一个方便的 to_string() 函数，还好当时我看到赛场机子中有Pycharm，所以我就用python计算了前两道填空题。&lt;/p>
&lt;p>&lt;strong>这个向下兼容的过程，消耗了我大量时间。&lt;/strong>&lt;/p>
&lt;p>最致命的是，有一道题我需要声明一个迭代器，但是我不知道迭代器的类型名，一般来说都是用auto自动推导的，但auto只在C++11标准以上才有，导致这道题的代码我在本地环境无法测试。明明代码是正确的，但本地的低版本编译器却认为我的代码是错误的。这种割裂感很少有。&lt;/p>
&lt;p>而现在看来这道题也依旧做对了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// C++98
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> vec;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;::&lt;/span>iterator it &lt;span style="color:#f92672">=&lt;/span> vec.begin();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// C++ 11
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">auto&lt;/span> it &lt;span style="color:#f92672">=&lt;/span> vec.begin(); &lt;span style="color:#75715e">// 自动推导为 std::vector&amp;lt;int&amp;gt;::iterator
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>与当时赛场的老师沟通，得知组委会只要求提供5.11版本的dev c++，而他们似乎只更新了代码编辑器版本，但一般来说dev c++是捆绑了一个编译器的，但不知为何内置的编译器却十分古典，感觉有点意思。&lt;/p>
&lt;p>比赛完后，我查找了在 C++98 的字符串类型转换方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// for C++98/03 standard
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>string &lt;span style="color:#a6e22e">old_int_to_string&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> v) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    ostringstream oss;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    oss &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> v;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#66d9ef">return&lt;/span> oss.str();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>string &lt;span style="color:#a6e22e">old_double_to_string&lt;/span>(&lt;span style="color:#66d9ef">double&lt;/span> v) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    ostringstream oss;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    oss &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> fixed &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> setprecision(&lt;span style="color:#ae81ff">6&lt;/span>) &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> v;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#66d9ef">return&lt;/span> oss.str();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>string &lt;span style="color:#a6e22e">old_c_style_to_string&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> v) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#66d9ef">char&lt;/span> buffer[&lt;span style="color:#ae81ff">32&lt;/span>]; &lt;span style="color:#75715e">// make sure buffer is suffcient
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>    sprintf(buffer, &lt;span style="color:#e6db74">&amp;#34;%d&amp;#34;&lt;/span>, v);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#66d9ef">return&lt;/span> string(buffer);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>事实上，生活在草台班子里的我们不必认真太多。&lt;/p></description></item><item><title>三星ZFold 3改造</title><link>https://moonlab.top/posts/2025/samsung-zfold3/</link><pubDate>Thu, 01 May 2025 16:11:27 +0800</pubDate><guid>https://moonlab.top/posts/2025/samsung-zfold3/</guid><description>&lt;h1 id="samsung-zfold-3">Samsung ZFold 3&lt;/h1>
&lt;p>&lt;img loading="lazy" src="IMG_2029.png" alt="" />
&lt;/p>
&lt;p>&lt;img loading="lazy" src="scrcpy_xRO0PSYyxj.png" alt="" />
&lt;/p>
&lt;h2 id="bootloader-unlock">BootLoader Unlock&lt;/h2>
&lt;p>打开 OEM Unlock&lt;/p>
&lt;h2 id="root">Root&lt;/h2>
&lt;h2 id="get-the-firmware">Get the Firmware&lt;/h2>
&lt;p>获取系统固件可以通过网络查找，也可以借助官方工具进行下载。下面将借助S换机助手将手机更新到最新版系统来获取固件。&lt;/p>
&lt;p>解锁BL后，在手机中进行系统更新会提示不信任设备，只能借助S换机助手来更新系统。&lt;/p>
&lt;p>&lt;img loading="lazy" src="explorer_jYjuPIThAE.jpg" alt="" />
&lt;/p>
&lt;p>连接后，换机助手会下载固件到安装路径下的Binary文件夹中，在手机Download完成后会自动删除下载的固件。&lt;/p>
&lt;p>&lt;img loading="lazy" src="SmartSwitchPC_QCh5cJbOn9.png" alt="" />
&lt;/p>
&lt;p>更新完成后，手机的系统版本是2025/6/29发布的大陆版F9260ZCSCKYF3&lt;/p>
&lt;p>&lt;img loading="lazy" src="scrcpy_FvDqDY2d7u.png" alt="" />
&lt;/p>
&lt;p>&lt;img loading="lazy" src="explorer_MicmWOa3Sj.png" alt="" />
&lt;/p>
&lt;p>将AP中的boot.img.lz4压缩为tar格式&lt;/p>
&lt;p>&lt;a href="https://github.com/fei-ke/Magisk/releases">https://github.com/fei-ke/Magisk/releases&lt;/a>&lt;/p>
&lt;p>使用Magisk对镜像进行修补&lt;/p>
&lt;p>&lt;img loading="lazy" src="scrcpy_6fzUZLhKPH.png" alt="" />
&lt;/p>
&lt;blockquote>
&lt;p>adb reboot download&lt;/p>&lt;/blockquote>
&lt;p>&lt;img loading="lazy" src="IMG_2034.png" alt="" />
&lt;/p>
&lt;p>使用Odin刷入镜像&lt;/p>
&lt;p>&lt;img loading="lazy" src="Odin3_v3.14.4_ufInA2qRE3.png" alt="" />
&lt;/p></description></item><item><title>快速求解平方根倒数算法</title><link>https://moonlab.top/posts/2025/alg-graphics-1/</link><pubDate>Tue, 04 Feb 2025 21:35:38 +0800</pubDate><guid>https://moonlab.top/posts/2025/alg-graphics-1/</guid><description>本文介绍了一种快速计算平方根倒数的算法，该算法源于上世纪90年代。文章首先解释了浮点数在计算机中的存储方式，特别是float32格式的结构，包括符号位、指数位和尾数位。接着，介绍了牛顿迭代法的基本原理及其在求解平方根倒数中的应用。通过对浮点数的对数变换，推导出与平方根倒数相关的公式，并解释了代码中使用的神秘常数 0x5f3759df 的来源，最后提到切比雪夫最佳逼近的概念，以优化计算结果。</description></item></channel></rss>